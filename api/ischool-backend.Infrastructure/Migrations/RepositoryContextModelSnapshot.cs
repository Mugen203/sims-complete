// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ischool_backend.Infrastructure;

#nullable disable

namespace ischool_backend.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseCourse", b =>
                {
                    b.Property<string>("DependentCoursesCourseCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PrerequisiteCoursesCourseCode")
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("DependentCoursesCourseCode", "PrerequisiteCoursesCourseCode");

                    b.HasIndex("PrerequisiteCoursesCourseCode");

                    b.ToTable("CourseCourse");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.AttendanceRecord", b =>
                {
                    b.Property<Guid>("AttendanceRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ApprovalTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("AttendanceStatus")
                        .HasColumnType("int");

                    b.Property<string>("ClassCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ClassSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LecturerApproved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("MarkTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("StudentMarked")
                        .HasColumnType("bit");

                    b.HasKey("AttendanceRecordId");

                    b.HasIndex("ClassCode");

                    b.HasIndex("ClassSessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("AttendanceRecords");

                    b.HasData(
                        new
                        {
                            AttendanceRecordId = new Guid("b299b5cd-28e0-4694-b4b3-3ed3cd4a5f93"),
                            ApprovalTime = new DateTimeOffset(new DateTime(2025, 2, 21, 10, 36, 52, 496, DateTimeKind.Unspecified).AddTicks(1268), new TimeSpan(0, 0, 0, 0, 0)),
                            AttendanceStatus = 1,
                            ClassSessionId = new Guid("837c7278-3754-4bb6-98ee-7fca53d40677"),
                            LecturerApproved = true,
                            MarkTime = new DateTimeOffset(new DateTime(2025, 2, 20, 10, 36, 52, 496, DateTimeKind.Unspecified).AddTicks(1265), new TimeSpan(0, 0, 0, 0, 0)),
                            Notes = "Student was present for the entire session",
                            StudentId = "222CS01000694",
                            StudentMarked = true
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Book", b =>
                {
                    b.Property<Guid>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("BookStatus")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Edition")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LibraryId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Publisher")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BookID");

                    b.HasIndex("LibraryId");

                    b.HasIndex("LibraryId1");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookID = new Guid("f549e035-5bd2-487a-867d-7ea5d1fd0ebd"),
                            Author = "John Doe",
                            BookStatus = 1,
                            Category = 6,
                            ISBN = "9781234567890",
                            LibraryId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            Title = "Introduction to C# Programming"
                        },
                        new
                        {
                            BookID = new Guid("8e739c1c-3563-47ed-863b-e9a90af61c88"),
                            Author = "Jane Smith",
                            BookStatus = 1,
                            Category = 2,
                            ISBN = "9780987654321",
                            LibraryId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            Title = "Data Structures and Algorithms"
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.BorrowRequest", b =>
                {
                    b.Property<Guid>("BorrowRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("BorrowDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ReturnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("BorrowRequestId");

                    b.HasIndex("BookId");

                    b.HasIndex("StudentId");

                    b.ToTable("BorrowRequests");

                    b.HasData(
                        new
                        {
                            BorrowRequestId = new Guid("8edfe3d8-1cf3-4732-a7f9-7095f805de60"),
                            BookId = new Guid("f549e035-5bd2-487a-867d-7ea5d1fd0ebd"),
                            BorrowDate = new DateTimeOffset(new DateTime(2025, 2, 11, 10, 36, 52, 492, DateTimeKind.Unspecified).AddTicks(5982), new TimeSpan(0, 0, 0, 0, 0)),
                            IsReturned = false,
                            ReturnDate = new DateTimeOffset(new DateTime(2025, 3, 21, 10, 36, 52, 492, DateTimeKind.Unspecified).AddTicks(5986), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 2,
                            StudentId = "222CS01000694"
                        },
                        new
                        {
                            BorrowRequestId = new Guid("4b7d4ee1-b6da-4fbb-afe3-60e8bd234c8a"),
                            BookId = new Guid("8e739c1c-3563-47ed-863b-e9a90af61c88"),
                            BorrowDate = new DateTimeOffset(new DateTime(2025, 2, 16, 10, 36, 52, 492, DateTimeKind.Unspecified).AddTicks(6689), new TimeSpan(0, 0, 0, 0, 0)),
                            IsReturned = false,
                            ReturnDate = new DateTimeOffset(new DateTime(2025, 4, 21, 10, 36, 52, 492, DateTimeKind.Unspecified).AddTicks(6692), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 4,
                            StudentId = "222CS01000694"
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Class", b =>
                {
                    b.Property<string>("ClassCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int?>("ClassLocation")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LecturerID")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("ClassCode");

                    b.HasIndex("CourseCode");

                    b.HasIndex("LecturerID");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            ClassCode = "TEST-CLASS-001",
                            AcademicYear = "2024-2025",
                            ClassLocation = 1,
                            CourseCode = "COSC115",
                            LecturerID = "L123456789012",
                            Semester = 1
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.ClassEnrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EnrollmentId");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset>("EnrollmentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("ClassCode");

                    b.HasIndex("CourseCode");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91b94042-7e61-46ba-80a2-d06d187f5c3e"),
                            AcademicYear = "2024-2025",
                            ClassCode = "TEST-CLASS-001",
                            EnrollmentDate = new DateTimeOffset(new DateTime(2024, 8, 21, 10, 36, 52, 494, DateTimeKind.Unspecified).AddTicks(8977), new TimeSpan(0, 0, 0, 0, 0)),
                            Semester = 1,
                            Status = 2,
                            StudentId = "222CS01000694"
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.ClassSchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ClassLocation")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<string>("LecturerID")
                        .HasColumnType("nvarchar(13)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ScheduleId");

                    b.HasIndex("ClassCode");

                    b.HasIndex("CourseCode");

                    b.HasIndex("LecturerID");

                    b.ToTable("ClassSchedules");

                    b.HasData(
                        new
                        {
                            ScheduleId = new Guid("5e5c3a7a-097d-4d3a-8629-234e03485ce4"),
                            ClassCode = "TEST-CLASS-001",
                            ClassLocation = 1,
                            DayOfWeek = 1,
                            EndTime = new TimeSpan(0, 10, 50, 0, 0),
                            IsBooked = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.ClassSession", b =>
                {
                    b.Property<Guid>("ClassSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LecturerNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("SessionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Topics")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ClassSessionId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ClassSessions");

                    b.HasData(
                        new
                        {
                            ClassSessionId = new Guid("837c7278-3754-4bb6-98ee-7fca53d40677"),
                            LecturerNotes = "Please review Chapter 1 before next session",
                            ScheduleId = new Guid("5e5c3a7a-097d-4d3a-8629-234e03485ce4"),
                            SessionDate = new DateTimeOffset(new DateTime(2025, 2, 23, 10, 36, 52, 481, DateTimeKind.Unspecified).AddTicks(9071), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 1,
                            Topics = "Introduction to System Programming"
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Course", b =>
                {
                    b.Property<string>("CourseCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ClassLocation")
                        .HasColumnType("int");

                    b.Property<int>("CourseCategory")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("CourseCode");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseCode = "COSC113",
                            ClassLocation = 1,
                            CourseCategory = 0,
                            CourseName = "Elements of Programming",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Introduction to fundamental programming concepts.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "COSC115",
                            ClassLocation = 2,
                            CourseCategory = 0,
                            CourseName = "Introduction to Computer Science I",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "First course in the computer science introductory sequence.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "COSC116",
                            ClassLocation = 3,
                            CourseCategory = 0,
                            CourseName = "Introduction to Computer Science II",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Second course in the computer science introductory sequence.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "COSC130",
                            ClassLocation = 4,
                            CourseCategory = 0,
                            CourseName = "Digital Electronics",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Fundamentals of digital electronics.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "COSC230",
                            ClassLocation = 5,
                            CourseCategory = 0,
                            CourseName = "Database Systems Design",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Principles of database systems design and implementation.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC240",
                            ClassLocation = 6,
                            CourseCategory = 0,
                            CourseName = "Systems Programming",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Advanced programming concepts in system-level development.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC245",
                            ClassLocation = 2,
                            CourseCategory = 0,
                            CourseName = "Entrepreneurship and Human Development",
                            Credits = 1,
                            Department = "Computer Science",
                            Description = "Exploration of entrepreneurship and human development topics.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC250",
                            ClassLocation = 3,
                            CourseCategory = 0,
                            CourseName = "Computer Ethics",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Ethical considerations in computing and information technology.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC255",
                            ClassLocation = 4,
                            CourseCategory = 0,
                            CourseName = "Operating Systems",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Core concepts and principles of operating systems.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC260",
                            ClassLocation = 5,
                            CourseCategory = 0,
                            CourseName = "System Analysis & Design",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Methods and techniques for system analysis and design.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC271",
                            ClassLocation = 6,
                            CourseCategory = 0,
                            CourseName = "Data Comms & Comp Network I",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Introduction to data communications and computer networks.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC280",
                            ClassLocation = 2,
                            CourseCategory = 0,
                            CourseName = "Information Systems",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Overview of information systems and their applications.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC331",
                            ClassLocation = 3,
                            CourseCategory = 0,
                            CourseName = "Computer Graphics I",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Introduction to computer graphics principles and techniques.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "COSC346",
                            ClassLocation = 4,
                            CourseCategory = 0,
                            CourseName = "Software Engineering",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Principles and practices of software engineering.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "COSC357",
                            ClassLocation = 5,
                            CourseCategory = 0,
                            CourseName = "Project Planning and Management",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Techniques for planning and managing software projects.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "COSC361",
                            ClassLocation = 6,
                            CourseCategory = 0,
                            CourseName = "Data Structures & Algorithms I",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Fundamental data structures and algorithms.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "COSC364",
                            ClassLocation = 2,
                            CourseCategory = 0,
                            CourseName = "Research Methods",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Introduction to research methodologies in computer science.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "COSC370",
                            ClassLocation = 3,
                            CourseCategory = 0,
                            CourseName = "Operations Research",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Application of operations research techniques to computer science problems.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "COSC380",
                            ClassLocation = 4,
                            CourseCategory = 0,
                            CourseName = "Compiler Design I",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Principles and techniques of compiler design.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "PHYS103",
                            ClassLocation = 5,
                            CourseCategory = 2,
                            CourseName = "Physics",
                            Credits = 3,
                            Department = "Physics",
                            Description = "Introductory course in physics.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "COSC257",
                            ClassLocation = 3,
                            CourseCategory = 0,
                            CourseName = "Computer Architecture & Microprocessor System",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Computer architecture and microprocessor systems.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC272",
                            ClassLocation = 4,
                            CourseCategory = 0,
                            CourseName = "Data Comms & Comp Networks II",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Advanced topics in data communications and computer networks.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC325",
                            ClassLocation = 5,
                            CourseCategory = 0,
                            CourseName = "Computer Security",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Fundamentals of computer security.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "COSC430",
                            ClassLocation = 6,
                            CourseCategory = 0,
                            CourseName = "Computer Simulation and System Modeling",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Techniques for computer simulation and system modeling.",
                            IsActive = true,
                            Level = 3
                        },
                        new
                        {
                            CourseCode = "COSC425",
                            ClassLocation = 2,
                            CourseCategory = 1,
                            CourseName = "Mobile Application Development",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Development of mobile applications for various platforms.",
                            IsActive = true,
                            Level = 3
                        },
                        new
                        {
                            CourseCode = "COSC435",
                            ClassLocation = 3,
                            CourseCategory = 1,
                            CourseName = "Computer and Cyber Forensics",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Principles and techniques of computer and cyber forensics.",
                            IsActive = true,
                            Level = 3
                        },
                        new
                        {
                            CourseCode = "COSC440",
                            ClassLocation = 4,
                            CourseCategory = 1,
                            CourseName = "Computer Vision",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Introduction to computer vision and image processing.",
                            IsActive = true,
                            Level = 3
                        },
                        new
                        {
                            CourseCode = "ACCT210",
                            ClassLocation = 5,
                            CourseCategory = 2,
                            CourseName = "Introduction to Accounting",
                            Credits = 3,
                            Department = "Accounting",
                            Description = "Basic accounting principles and practices.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "MATH171",
                            ClassLocation = 6,
                            CourseCategory = 2,
                            CourseName = "Introductory Maths for Computer Science",
                            Credits = 3,
                            Department = "Mathematics",
                            Description = "Mathematical concepts relevant to computer science.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "MATH172",
                            ClassLocation = 2,
                            CourseCategory = 2,
                            CourseName = "Discrete and Continuous Mathematics",
                            Credits = 3,
                            Department = "Mathematics",
                            Description = "Discrete and continuous mathematics for computer science.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "MGNT255",
                            ClassLocation = 3,
                            CourseCategory = 2,
                            CourseName = "Principles of Management",
                            Credits = 3,
                            Department = "Management",
                            Description = "Fundamental principles of management.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "STAT282",
                            ClassLocation = 4,
                            CourseCategory = 2,
                            CourseName = "Probability & Statistics",
                            Credits = 3,
                            Department = "Statistics",
                            Description = "Introduction to probability and statistics.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "AFST205",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Introduction to African Music",
                            Credits = 1,
                            Department = "African Studies",
                            Description = "Introduction to the diverse world of African music.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "CMME115",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Introduction to Communication Skills",
                            Credits = 2,
                            Department = "Communication",
                            Description = "Basic communication skills for effective interaction.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "ENGL111",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Language and Writing Skills I",
                            Credits = 2,
                            Department = "English",
                            Description = "First course in language and writing skills development.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "ENGL112",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Language and Writing Skills II",
                            Credits = 2,
                            Department = "English",
                            Description = "Second course in language and writing skills development.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "ENGL122",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Language and Writing Skills II",
                            Credits = 3,
                            Department = "English",
                            Description = "Further development of language and writing skills.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "FREN121",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "French for General Communication I",
                            Credits = 2,
                            Department = "French",
                            Description = "Introductory French for general communication.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "HLTH200",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Health Principles",
                            Credits = 3,
                            Department = "Health",
                            Description = "Fundamental principles of health and wellness.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "PEAC100",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Physical Activity",
                            Credits = 0,
                            Department = "Physical Education",
                            Description = "Introduction to physical activity and fitness.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "PSYC105",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Introduction to Psychology",
                            Credits = 3,
                            Department = "Psychology",
                            Description = "Basic concepts and theories of psychology.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "RELB163",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Life and Teachings of Jesus",
                            Credits = 3,
                            Department = "Religion",
                            Description = "Study of the life and teachings of Jesus Christ.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "RELB250",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Principles of Christian Faith",
                            Credits = 3,
                            Department = "Religion",
                            Description = "Core principles of Christian faith and theology.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "RELT385",
                            ClassLocation = 1,
                            CourseCategory = 3,
                            CourseName = "Introduction to Biblical Foundation Ethics",
                            Credits = 3,
                            Department = "Theology",
                            Description = "Ethical foundations based on biblical teachings.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "COSC492",
                            ClassLocation = 4,
                            CourseCategory = 4,
                            CourseName = "Final Year Project II",
                            Credits = 6,
                            Department = "Computer Science",
                            Description = "Continuation of the final year project in computer science.",
                            IsActive = true,
                            Level = 3
                        },
                        new
                        {
                            CourseCode = "AFST243",
                            ClassLocation = 1,
                            CourseCategory = 5,
                            CourseName = "Chieftancy and Development",
                            Credits = 1,
                            Department = "African Studies",
                            Description = "Exploration of chieftaincy and its role in development.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC124",
                            ClassLocation = 2,
                            CourseCategory = 5,
                            CourseName = "Procedural Programming",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Introduction to procedural programming paradigms.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "COSC214",
                            ClassLocation = 3,
                            CourseCategory = 5,
                            CourseName = "Computer Organization",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Fundamentals of computer organization and architecture.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC224",
                            ClassLocation = 4,
                            CourseCategory = 5,
                            CourseName = "Object-Oriented Programming",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Principles and practices of object-oriented programming.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "COSC360",
                            ClassLocation = 5,
                            CourseCategory = 5,
                            CourseName = "Web Applications Development",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Development of web applications using modern technologies.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "COSC390",
                            ClassLocation = 6,
                            CourseCategory = 5,
                            CourseName = "Internship",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Practical work experience through internship.",
                            IsActive = true,
                            Level = 2
                        },
                        new
                        {
                            CourseCode = "COSC429",
                            ClassLocation = 2,
                            CourseCategory = 5,
                            CourseName = "Cloud Computing Systems",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Concepts and technologies of cloud computing systems.",
                            IsActive = true,
                            Level = 3
                        },
                        new
                        {
                            CourseCode = "COSC446",
                            ClassLocation = 3,
                            CourseCategory = 5,
                            CourseName = "Advanced Network & Systems Administration",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Advanced topics in network and systems administration.",
                            IsActive = true,
                            Level = 3
                        },
                        new
                        {
                            CourseCode = "COSC455",
                            ClassLocation = 4,
                            CourseCategory = 5,
                            CourseName = "Artificial Intelligence & Machine Learning I",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Introduction to artificial intelligence and machine learning.",
                            IsActive = true,
                            Level = 3
                        },
                        new
                        {
                            CourseCode = "CSCD210",
                            ClassLocation = 5,
                            CourseCategory = 5,
                            CourseName = "Numerical Methods",
                            Credits = 3,
                            Department = "Computer Science",
                            Description = "Numerical methods for problem-solving in computer science.",
                            IsActive = true,
                            Level = 1
                        },
                        new
                        {
                            CourseCode = "CTZN001",
                            ClassLocation = 1,
                            CourseCategory = 5,
                            CourseName = "Citizenship",
                            Credits = 0,
                            Department = "Citizenship",
                            Description = "Fundamentals of citizenship and civic responsibility.",
                            IsActive = true,
                            Level = 0
                        },
                        new
                        {
                            CourseCode = "GNED125",
                            ClassLocation = 1,
                            CourseCategory = 5,
                            CourseName = "Study Skills",
                            Credits = 0,
                            Department = "General Education",
                            Description = "Essential study skills for academic success.",
                            IsActive = true,
                            Level = 0
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.FeeAccount", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<decimal>("TotalFeeDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalFeePaid")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AccountId");

                    b.HasIndex("StudentID")
                        .IsUnique();

                    b.ToTable("FeeAccounts");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("870cd736-6042-4e98-9a11-7375208ec88b"),
                            AcademicYear = "2024-2025",
                            Currency = 1,
                            Semester = 1,
                            StudentID = "222CS01000694",
                            TotalFeeDue = 1000m,
                            TotalFeePaid = 500m
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.FeePayment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ReceiptIssued")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiptNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("AccountId");

                    b.ToTable("FeePayments");

                    b.HasData(
                        new
                        {
                            PaymentID = new Guid("dab4fadc-acef-46e7-bc20-c5357c3d8930"),
                            AcademicYear = "2024-2025",
                            AccountId = new Guid("870cd736-6042-4e98-9a11-7375208ec88b"),
                            AmountPaid = 200.00m,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 21, 10, 36, 52, 492, DateTimeKind.Unspecified).AddTicks(2897), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "SeedDataScript",
                            Description = "Semester 1 Fees - Mobile Money Payment",
                            PaymentDate = new DateTimeOffset(new DateTime(2025, 2, 16, 10, 36, 52, 492, DateTimeKind.Unspecified).AddTicks(2854), new TimeSpan(0, 0, 0, 0, 0)),
                            PaymentMethod = 1,
                            PaymentReference = "MOMO-TRANS-12345",
                            ReceiptIssued = true,
                            ReceiptNumber = "RCPT-2024-001",
                            Semester = 1,
                            Status = 2
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Grade", b =>
                {
                    b.Property<Guid>("GradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("ClassCode")
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ClassEnrollmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset>("DateAwarded")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("GradeID");

                    b.HasIndex("ClassCode");

                    b.HasIndex("ClassEnrollmentId");

                    b.HasIndex("CourseCode");

                    b.HasIndex("StudentID");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            GradeID = new Guid("c619c38c-1499-4711-ac6d-6a996974b946"),
                            AcademicYear = "2024-2025",
                            CourseCode = "COSC240",
                            DateAwarded = new DateTimeOffset(new DateTime(2024, 11, 21, 10, 36, 52, 493, DateTimeKind.Unspecified).AddTicks(7667), new TimeSpan(0, 0, 0, 0, 0)),
                            GradeValue = 1,
                            Remarks = "Excellent performance",
                            Semester = 1,
                            StudentID = "222CS01000694"
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Lecturer", b =>
                {
                    b.Property<string>("LecturerID")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Credentials")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("HireDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfficeLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LecturerID");

                    b.ToTable("Lecturers");

                    b.HasData(
                        new
                        {
                            LecturerID = "L123456789012",
                            Credentials = "PhD in Computer Science",
                            Department = "Computer Science",
                            Email = "pprince@example.com",
                            FirstName = "Papa",
                            Gender = 1,
                            HireDate = new DateTimeOffset(new DateTime(2020, 2, 21, 10, 36, 52, 472, DateTimeKind.Unspecified).AddTicks(7969), new TimeSpan(0, 0, 0, 0, 0)),
                            LastName = "Prince",
                            OfficeLocation = "Main Building Office",
                            Phone = "0123456789"
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.LecturerEvaluation", b =>
                {
                    b.Property<Guid>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("EvaluationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LecturerId")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("EvaluationId");

                    b.HasIndex("LecturerId");

                    b.ToTable("LecturerEvaluations");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.LecturerEvaluationDetail", b =>
                {
                    b.Property<Guid>("EvaluationDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("EvaluationDetailId");

                    b.HasIndex("EvaluationId");

                    b.ToTable("LecturerEvaluationDetails");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Library", b =>
                {
                    b.Property<Guid>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("LibraryId");

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            LibraryId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            LibraryName = "Main Library",
                            Location = "Central Campus"
                        });
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Student", b =>
                {
                    b.Property<string>("StudentID")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DegreeProgram")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("EnrollmentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EnrollmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsInternational")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StudentID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentID = "222CS01000694",
                            Address = "Kings and Queens Hostel, Oyibi, Ghana",
                            DateOfBirth = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DegreeProgram = "BSc Computer Science",
                            Email = "radahn@example.com",
                            EnrollmentDate = new DateTimeOffset(new DateTime(2024, 2, 21, 10, 36, 52, 487, DateTimeKind.Unspecified).AddTicks(4366), new TimeSpan(0, 0, 0, 0, 0)),
                            EnrollmentStatus = 2,
                            FirstName = "Kwaku",
                            Gender = 1,
                            IsInternational = false,
                            LastName = "Affram",
                            Major = "Cloud Security",
                            Phone = "0553138727"
                        });
                });

            modelBuilder.Entity("CourseCourse", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("DependentCoursesCourseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ischool_backend.Core.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("PrerequisiteCoursesCourseCode")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.AttendanceRecord", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.Class", null)
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("ClassCode");

                    b.HasOne("ischool_backend.Core.Entities.ClassSession", "ClassSession")
                        .WithMany()
                        .HasForeignKey("ClassSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ischool_backend.Core.Entities.Student", "Student")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSession");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Book", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ischool_backend.Core.Entities.Library", null)
                        .WithMany("Books")
                        .HasForeignKey("LibraryId1");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.BorrowRequest", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.Book", "Book")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ischool_backend.Core.Entities.Student", "Student")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Class", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ischool_backend.Core.Entities.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.ClassEnrollment", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.Class", "Class")
                        .WithMany("ClassEnrollments")
                        .HasForeignKey("ClassCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ischool_backend.Core.Entities.Course", null)
                        .WithMany("ClassEnrollments")
                        .HasForeignKey("CourseCode");

                    b.HasOne("ischool_backend.Core.Entities.Student", "Student")
                        .WithMany("ClassEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.ClassSchedule", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.Class", "Class")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("ClassCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ischool_backend.Core.Entities.Course", null)
                        .WithMany("ClassSchedules")
                        .HasForeignKey("CourseCode");

                    b.HasOne("ischool_backend.Core.Entities.Lecturer", null)
                        .WithMany("ClassSchedules")
                        .HasForeignKey("LecturerID");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.ClassSession", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.ClassSchedule", "Schedule")
                        .WithMany("ClassSessions")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.FeeAccount", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.Student", "Student")
                        .WithOne("FeeAccount")
                        .HasForeignKey("ischool_backend.Core.Entities.FeeAccount", "StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.FeePayment", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.FeeAccount", "FeeAccount")
                        .WithMany("FeePayments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FeeAccount");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Grade", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.Class", null)
                        .WithMany("Grades")
                        .HasForeignKey("ClassCode");

                    b.HasOne("ischool_backend.Core.Entities.ClassEnrollment", null)
                        .WithMany("Grades")
                        .HasForeignKey("ClassEnrollmentId");

                    b.HasOne("ischool_backend.Core.Entities.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ischool_backend.Core.Entities.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.LecturerEvaluation", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.Lecturer", "Lecturer")
                        .WithMany("Evaluations")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.LecturerEvaluationDetail", b =>
                {
                    b.HasOne("ischool_backend.Core.Entities.LecturerEvaluation", "LecturerEvaluation")
                        .WithMany("EvaluationDetails")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LecturerEvaluation");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Book", b =>
                {
                    b.Navigation("BorrowRequests");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Class", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("ClassEnrollments");

                    b.Navigation("ClassSchedules");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.ClassEnrollment", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.ClassSchedule", b =>
                {
                    b.Navigation("ClassSessions");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Course", b =>
                {
                    b.Navigation("ClassEnrollments");

                    b.Navigation("ClassSchedules");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.FeeAccount", b =>
                {
                    b.Navigation("FeePayments");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Lecturer", b =>
                {
                    b.Navigation("ClassSchedules");

                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.LecturerEvaluation", b =>
                {
                    b.Navigation("EvaluationDetails");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Library", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ischool_backend.Core.Entities.Student", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("BorrowRequests");

                    b.Navigation("ClassEnrollments");

                    b.Navigation("FeeAccount")
                        .IsRequired();

                    b.Navigation("Grades");
                });
#pragma warning restore 612, 618
        }
    }
}
